type CustomerType {
  id: Int!
  name: String!
}

"""
The `Date` scalar type represents a year, month and day in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

"""
The `DateTime` scalar type represents a date and time. `DateTime` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTime

"""
The `DateTimeOffset` scalar type represents a date, time and offset from UTC.
`DateTimeOffset` expects timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTimeOffset

scalar Decimal

"""
The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds.
"""
scalar Milliseconds

type Mutation {
  createOrder(order: OrderInput!): OrderType
  startOrder(orderId: String!): OrderType
}

type OrderEventType {
  id: String!
  name: String!
  orderId: String!
  status: OrderStatuses
  timeStamp: Date!
}

input OrderInput {
  name: String!
  description: String!
  customerId: Int!
  created: Date!
}

enum OrderStatuses {
  """Order was created"""
  CREATED

  """Order is being processed"""
  PROCESSING

  """Order is completed"""
  COMPLETED

  """Order was cancalled"""
  CANCALLED

  """Order was closed"""
  CLOSED
}

type OrderType {
  created: Date!
  customer: CustomerType
  description: String!
  id: String!
  name: String!
  status: OrderStatuses
}

type Query {
  orders: [OrderType]
}

"""
The `Seconds` scalar type represents a period of time represented as the total number of seconds.
"""
scalar Seconds

type Subscription {
  orderEvent(statuses: [OrderStatuses] = null): OrderEventType
}

scalar Uri

